import 'dart:ui';

import 'package:flutter/material.dart';
import 'dart:math';

void main() {
  runApp(
    MaterialApp(
      initialRoute: '/',
      routes: {
        '/': (context)=> MyHomePage(),
        '/settings': (context)=> SettingsPage(),
        '/rps': (context)=> RPS(),
        '/ttt': (context)=> TTT(),
        },
      ),
  );
}

class MyHomePage extends StatelessWidget{
  @override
  Widget build(BuildContext context){
    return Scaffold(
      backgroundColor: Colors.blueGrey[800],
      appBar: AppBar(
        title: Text('Gamertime'),
        backgroundColor: Colors.blueGrey,
      ),
      body: ListView(
        children: <Widget>[
          Card(
            child: ListTile(
              leading: Icon(Icons.adb),
              title: Text('Rock Paper Scissors'),
              onTap: (){Navigator.pushNamed(context, '/rps');},
            ),
          ),
          Card(
            child: ListTile(
              leading: Icon(Icons.cached),
              title: Text('Tic-Tac-Toe'),
              onTap: (){Navigator.pushNamed(context, '/ttt');},
            )
          )
        ],
      ),
      bottomNavigationBar: bottomNavBar(context, 0),
    );
  }
}

Widget bottomNavBar(BuildContext context, int _currentIndex){
  return BottomNavigationBar(
    currentIndex: _currentIndex,
      items: [
      BottomNavigationBarItem(
          icon: Icon(Icons.videogame_asset),
          title: Text('Home')
      ),
      BottomNavigationBarItem(
          icon: Icon(Icons.build),
          title: Text('Settings'),
      )
    ],
    onTap: (index){
      buildPage(index, context, _currentIndex);
    }
  );
}

void buildPage(int index, BuildContext context, int _currentIndex){
  if (index == 0 && _currentIndex == 0){
    Navigator.popUntil(context, ModalRoute.withName('/'));
  }
  else if(index == 0){
    Navigator.pop(context);
  }
  else if(index != _currentIndex){
    Navigator.pushNamed(context, '/settings');
  }
}

class SettingsPage extends StatelessWidget{
  @override
  Widget build(BuildContext context){
    return Scaffold(
      backgroundColor: Colors.blueGrey,
      bottomNavigationBar: bottomNavBar(context, 1),
    );
  }
}

class RPS extends StatelessWidget{
  @override
  Widget build(BuildContext context){
    return Scaffold(
      backgroundColor: Colors.blueGrey[800],
      appBar: AppBar(
        title: Text('Rock Paper Scissors'),
        backgroundColor: Colors.blueGrey,
      ),
      body: Center(
            child: ItemCounter(),
            ),
      bottomNavigationBar: bottomNavBar(context, 0),
    );
  }
}



//necessary syntax for stateful widgets

class ItemCounter extends StatefulWidget{
  @override
  _Choose createState() {
      return _Choose();
  }
}

class _Choose extends State<ItemCounter>{
  int count = 0;
  int getCount(){
    return count;
  }
  @override
  Widget build(BuildContext context){
    if (count < 1) {
      return SingleChildScrollView(
          child: Column(
           children: <Widget>[
            InkWell(
              child: Image.asset('images/rock.png',
                height: 200,
                width: 200,
              ),
              onTap: () {
                setState(() {
                  count = 1;
                });
              }
            ),
            InkWell(
              child: Image.asset(
                'images/paper.png',
                height: 200,
                width: 200,
              ),
              onTap: (){
                setState(() {
                 count = 2;
               });
              },
            ),
            InkWell(
              child: Image.asset(
                'images/scissors.png',
                height: 200,
                width: 200,
              ),
              onTap: (){
                setState(() {
                 count = 3;
                });
              },
            )
          ],
          )
      );
    }
    else {
      String choice;
      String computerChoice;
      String outcome;
      DateTime seed = new DateTime.now();
      Random rand = new Random(seed.millisecondsSinceEpoch);
      int computerCount = rand.nextInt(3)+1;

      //Assigns playerChoice string
      if (count == 1){
        choice = "Rock";
      }
      else if (count == 2){
        choice = "Paper";
      }
      else if (count == 3){
        choice = "Scissors";
      }

      //Assigns computerChoice string
      if (computerCount == 1){
        computerChoice = "Rock";
      }
      else if (computerCount == 2){
        computerChoice = "Paper";
      }
      else if (computerCount == 3){
        computerChoice = "Scissors";
      }

      //Determines outcome of game
      if (computerCount == count){
        outcome = "You tied!";
      }
      else if (((computerCount == 1) && (count == 2)) || ((computerCount == 2) && (count == 3)) || ((computerCount == 3) && (count == 1))){
        outcome = "YOU WIN!";
      }
      else{
        outcome = "YOU LOSE!";
      }
      return SingleChildScrollView(child: Column(
        children: <Widget>[
          Text("You chose " + choice,
          style: TextStyle(fontSize: 20,
          color: Colors.white,
          fontWeight: FontWeight.bold),),
          Image.asset('images/' + choice.toLowerCase() + '.png',
          height: 100,
          width: 100),
          Text("The computer chose " + computerChoice,
            style: TextStyle(fontSize: 20,
                color: Colors.white,
                fontWeight: FontWeight.bold)),
          Image.asset('images/' + computerChoice.toLowerCase() + '.png',
          height: 100,
          width: 100),
          Text(outcome,
            style: TextStyle(fontSize: 20,
                color: Colors.white,
                fontWeight: FontWeight.bold),),
          SizedBox(height: 300),
          Card(child: Padding(child: InkWell(
              onTap: () {
                setState(() {
                  count=0;
                });
              },
              child: Text("Play Again?",
              style: TextStyle(fontSize: 30,
              color: Colors.white),)
          ),
            padding: EdgeInsets.all(10.0),
          ),
            color: Colors.blueGrey,

          )
        ],
      )
    );
    }
  }
}

class TTT extends StatelessWidget{
  @override
  Widget build(BuildContext context){
    return Scaffold(
      backgroundColor: Colors.blueGrey[800],
      appBar: AppBar(
        title: Text("Tic-Tac-Toe"),
        backgroundColor: Colors.blueGrey,
      ),
      body: TicTacToeBoard(),
      bottomNavigationBar: bottomNavBar(context, 0),
    );
  }
}

class TicTacToeBoard extends StatefulWidget{
  @override
  _StatefulTicTacToe  createState(){
    return _StatefulTicTacToe();
  }
}

class _StatefulTicTacToe extends State<TicTacToeBoard>{
  var boardValues = [0,0,0,0,0,0,0,0,0];
  @override
  Widget build(BuildContext context) {
    return Container(
        decoration: BoxDecoration(
          image: DecorationImage(
            image: AssetImage('images/tttboard.png'),
            fit: BoxFit.contain,
            alignment: Alignment(-1, -1),
          ),
        ),
        child: GridView.count(
          crossAxisCount: 3,
          children: <Widget>[
            Card(),
            Card(),
            Card(),
            Card(),
            Card(),
            Card(),
            Card(),
            Card(),
            Card(),
          ],
        )
    );
  }
}
